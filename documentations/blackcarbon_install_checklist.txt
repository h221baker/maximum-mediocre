https://wiki.archlinux.org/index.php/Installation_guide

## Initial checkup
Verify the boot mode
If UEFI mode is enabled on an UEFI motherboard, Archiso will boot Arch Linux accordingly via systemd-boot. To verify this, list the efivars directory:
# ls /sys/firmware/efi/efivars

### Configure wireless network
Identify network interface via:
# ip link 

Enable interface:
# ip link set wlp4s0 up

Connect to access point via wpa_supplicant:
# wpa_supplicant -i wlp4s0 -c <(wpa_passphrase "your_SSID" "your_key") &

Get ip address via DHCP:
# dhcpcd

ping internet
# ping www.google.com

Update the system clock
# timedatectl set-ntp true

## Setup partitions
LVM on LUKS
https://wiki.archlinux.org/index.php/Dm-crypt/Encrypting_an_entire_system
section: Encrypted boot partition (GRUB)

+---------------+----------------+----------------+----------------+----------------+
|ESP partition: |Boot partition: |Volume 1:       |Volume 2:       |Volume 3:       |
|               |                |                |                |                |
|/boot/efi      |/boot           |root            |swap            |home            |
|               |                |                |                |                |
|               |                |/dev/store/root |/dev/store/swap |/dev/store/home | 
|/dev/sdaX      |/dev/sdaY       +----------------+----------------+----------------+
|unencrypted    |LUKS encrypted  |/dev/sdaZ encrypted using LVM on LUKS             |
+---------------+----------------+--------------------------------------------------+

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048         1050623   512.0 MiB   EF00  EFI System
   2         1050624         1460223   200.0 MiB   8300  Linux filesystem
   3         1460224        41943006   19.3 GiB    8E00  Linux LVM

# fdisk /dev/nvme0n1
Create 3 partition according the 3 listed

Preparing the disk
# cryptsetup luksFormat /dev/nvme0n1p3
# cryptsetup open /dev/nvme0n1p3 lvm

Preparing the logical volumes
# pvcreate /dev/mapper/lvm
# vgcreate CarbonVol /dev/mapper/lvm

# lvcreate -L 20G CarbonVol -n root
# lvcreate -l 100%FREE CarbonVol -n home

# mount /dev/mapper/CarbonVol-root /mnt
# mkdir /mnt/home
# mount /dev/mapper/CarbonVol-home /mnt/home

Preparing the boot partition
# cryptnvme0n1p2setup luksFormat /dev/nvme0n1p2
# cryptsetup open /dev/nvme0n1p2 boot
# mkfs.ext2 /dev/mapper/boot
# mkdir /mnt/boot
# mount /dev/mapper/boot /mnt/boot

# mkfs.fat -F32 /dev/nvme0n1p1
# mkdir /mnt/boot/efi
# mount /dev/nvme0n1p1 /mnt/boot/efi

To avoid the double entry for unlocking  /boot, follow the instructions at Dm-crypt/Device encryption#Keyfiles to:
1. Create a randomtext keyfile,
# dd bs=512 count=4 if=/dev/urandom of=/etc/bootkeyfile

2. Setup proper permission
# chmod 000 /crypto_keyfile.bin
# chmod 600 /boot/initramfs-linux*

3. Add the keyfile to the (/dev/sdaY) boot partition's LUKS header and
# cryptsetup luksAddKey /dev/sdX# /crypto_keyfile.bin

4. Check the /etc/fstab entry and add the /etc/crypttab line to unlock it automatically at boot.

START INSTALLTION PROCRESS

BEFORE RESUMING:
# pacman -S base-devel
# pacman -S grub
# pacman -S efibootmgr
# pacman -S neovim
# pacman -S wpa_supplicant dhcpd

Configuring mkinitcpio
# vim /etc/mkinitcpio.conf
----------------------------------------------------------------
MODULES="nvme"
HOOKS="... keyboard block encrypt lvm2 ... filesystems ..."
----------------------------------------------------------------

Configuring the boot loader
# vim /etc/default/grub
----------------------------------------------------------------
GRUB_CMDLINE_LINUX="... cryptdevice=UUID=959463b9-c6c8-43d7-8dbc-0c5067817943:lvm ..."
GRUB_ENABLE_CRYPTODISK=y
----------------------------------------------------------------

Install new initramfs
# mkinitcpio -p linux

# grub-mkconfig -o /boot/grub/grub.cfg
# grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=grub --recheck

AFTER REBOOTING

Adding a user:
# useradd -m -s /bin/bash hjz
# passwd hjz
# usermod -aG root hjz
# usermod -aG adm hjz
# usermod -aG wheel hjz
# usermod -aG ftp hjz
# usermod -aG uucp hjz
# usermod -aG log hjz
# usermod -aG rfill hjz
# usermod -aG systemd-journal hjz

Setup sudo
# pacman -S sudo
# visudo    (uncomment WHEEL PASSWORDLESS)

Disable root login
# sudo passwd -l root

Setup wifi-profile
# pacman -S dialog
# wifi-menu

# netcl enable "wlp4s0-221b_baker_st 5GHz"

Update packages
# pacman -Syu

INSTALL X
# pacman -S xorg-server xorg-apps xorg-init
# pacman -S i3 rxvt-unicode dmenu

add to ~/.profile
" if [ -z "$DISPLAY" ] && [ -n "$XDG_VTNR" ] && [ "$XDG_VTNR" -eq 1 ]; then
"   exec startx
" fi

Change i3 font to Dajavu 9

add to ~/.xinitrc
" setxkbmap -option ctrl:nocaps
" exec i3 -V >> ~/.i3/i3log 2>&1

INSTALL TOOL TO BOOTSTRAP
# pacman -S git openssh
# ssh-keygen -t dsa

INSTALL GOOGLE-CHROME
# mkdir aurpackage
# git clone https://aur.archlinux.org/google-chrome.git
# makepkg -si   (Install)
# makepkg -rc   (clean up)

FONTS
# pacman -S ttf-dejavu


setup yubikey
https://wiki.archlinux.org/index.php/yubikey

Setup gopass

gopass dmenu

i3 remove boarder

# pacman -S vlc qt4

# pacman -S adobe-source-han-sans-otc-fonts

# pacman -S pulse pulseaudio-alsa libpulse alsa-plugins
