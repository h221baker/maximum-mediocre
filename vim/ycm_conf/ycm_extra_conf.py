# A relative generic global best attempt ycm extra conf file
import os
import ycm_core

SOURCE_EXTENSIONS = ['.cpp', '.cxx', '.cc', '.c', '.m', '.mm']

# High level assumptions:
# - The compilation database file is "compiler_commands.json" which is most likely generated by Cmake or GN
# - The compilation database file can be found from current working directory, and not too deep from it

# compilation_database_file = 'compile_commands.json'
compilation_database_folder = f"{os.path.realpath(os.curdir)}/out"

if os.path.exists(compilation_database_folder):
    database = ycm_core.CompilationDatabase(compilation_database_folder)
else:
    database = None


def IsHeaderFile(filename):
    extension = os.path.splitext(filename)[1]
    return extension in ['.h', '.hxx', '.hpp', '.hh']


def GetCompilationInfoForFile(filename):
    # The compilation_commands.json file generated by CMake does not have entries
    # for header files. So we do our best by asking the db for flags for a
    # corresponding source file, if any. If one exists, the flags for that file
    # should be good enough.
    if IsHeaderFile(filename):
        basename = os.path.splitext(filename)[0]
        for extension in SOURCE_EXTENSIONS:
            replacement_file = basename + extension
            if os.path.exists(replacement_file):
                compilation_info = database.GetCompilationInfoForFile(
                    replacement_file)
                if compilation_info.compiler_flags_:
                    return compilation_info
        return None
    return database.GetCompilationInfoForFile(filename)


# This is the entry point; this function is called by ycmd to produce flags for
# a file.
def Settings(**kwargs):
    language = kwargs['language']
    filename = kwargs['filename']
    if language == 'cfamily':
        if database:
            compilation_info = GetCompilationInfoForFile(filename)
            if not compilation_info:
                return None

            # Bear in mind that compilation_info.compiler_flags_ does NOT return a
            # python list, but a "list-like" StringVec object.
            return {
                'flags':
                list(compilation_info.compiler_flags_),
                'include_paths_relative_to_dir':
                compilation_info.compiler_working_dir_
            }
    elif language == 'python':
        return {
            # Settings for the Python completer.
        }
    return {}
