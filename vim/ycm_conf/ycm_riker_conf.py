import subprocess
import os
import ycm_core

COMPILATION_DATABASE_FILE = "compile_commands.json"

BASE_FLAGS = [
        '-Wall',
        '-Wextra',
        '-Werror',
        '-Wno-long-long',
        '-Wno-variadic-macros',
        '-fexceptions',
        '-ferror-limit=10000',
        '-DNDEBUG',
        '-std=c++11',
        '-xc++',
        '-I/usr/lib/',
        '-I/usr/include/'
        ]

KEYWORD_MAP = {"reader" : "r12-firmware",
               "generic": "r12-firmware",
               "MK21FA12WS": "r12-firmware",
               "r12"    : "r12-firmware",
               "r12c"   : "r12c-firmware-cpu1",
               "k450"   : "r12c-firmware-cpu1",
               "r6"     : "r6-firmware",
               "x2"     : "x2-firmware",
               "twr"    : "twr-k21f-firmware"}

SOURCE_EXTENSIONS = [
        '.cpp',
        '.cxx',
        '.cc',
        '.c',
        '.m',
        '.mm'
        ]

HEADER_EXTENSIONS = [
        '.h',
        '.hxx',
        '.hpp',
        '.hh'
        ]

# Dictionary of dictionary of compilation_db
DATABASES = {}


class MissingDatabase(Exception):
    pass


def DirectoryOfThisFile(file):
    return os.path.dirname(os.path.abspath(file))


def RikerHomeDirectoryOfThisFile(file):
    if IsRiker(file):
        dir = file
        while dir != '/':
            dir = DirectoryOfThisFile(dir)
            if os.path.exists(os.path.join(dir, ".git")):
                return dir


def DatabaseForBuildConfig(basedir, subdirs):
    basedir = os.path.join(basedir, subdirs)
    if COMPILATION_DATABASE_FILE in os.listdir(basedir):
        return ycm_core.CompilationDatabase(basedir)
    elif "Debug" in os.listdir(basedir):
        return DatabaseForBuildConfig(basedir, "Debug")
    elif "Release" in os.listdir(basedir):
        return DatabaseForBuildConfig(basedir, "Release")
    else:
        return None


def GenerateDatabases(riker_folder, file):
    if riker_folder not in DATABASES:
        DATABASES[riker_folder] = {}

    # build all the compilation databases
    BUILD_DIR = os.path.join(RikerHomeDirectoryOfThisFile(file), "build")
    for dir in os.listdir(BUILD_DIR):
        database = DatabaseForBuildConfig(BUILD_DIR, dir)
        if database:
            print("Generate db for: %s" % dir)
            DATABASES[riker_folder][dir] = database


def MakeRelativePathsInFlagsAbsolute(flags, working_directory):
    if not working_directory:
        return list(flags)
    new_flags = []
    make_next_absolute = False
    path_flags = ['-isystem', '-I', '-iquote', '--sysroot=']
    for flag in flags:
        new_flag = flag

        if make_next_absolute:
            make_next_absolute = False
            if not flag.startswith('/'):
                new_flag = os.path.join(working_directory, flag)

        for path_flag in path_flags:
            if flag == path_flag:
                make_next_absolute = True
                break

            if flag.startswith(path_flag):
                path = flag[len(path_flag):]
                new_flag = path_flag + os.path.join(working_directory, path)
                break

        if new_flag:
            new_flags.append(new_flag)
    return new_flags


def IsHeaderFile(filename):
    extension = os.path.splitext(filename)[1]
    return extension in ['.h', '.hxx', '.hpp', '.hh']


def FindDatabseAndCompilationInfo(filename):
    riker_folder = RikerHomeDirectoryOfThisFile(filename)
    if riker_folder not in DATABASES:
        GenerateDatabases(riker_folder, filename)

    for key, value in KEYWORD_MAP.iteritems():
        if key in filename and value in DATABASES[riker_folder]:
            compilation_info = DATABASES[riker_folder][value].GetCompilationInfoForFile(filename)
            if compilation_info.compiler_flags_:
                print("Found: key %s; value %s" % (key, value))
                return compilation_info

    for key, database in DATABASES[riker_folder].iteritems():
        compilation_info = database.GetCompilationInfoForFile(filename)
        if compilation_info.compiler_flags_:
            return compilation_info

    raise MissingDatabase


def GetCompilationInfoForFile(filename):
    # The compilation_commands.json file generated by CMake does not have entries
    # for header files. So we do our best by asking the db for flags for a
    # corresponding source file, if any. If one exists, the flags for that file
    # should be good enough.
    if IsHeaderFile(filename):
        basename = os.path.splitext(filename)[0]
        for extension in SOURCE_EXTENSIONS:
            replacement_file = basename + extension
            if os.path.exists(replacement_file):
                compilation_info = FindDatabseAndCompilationInfo(replacement_file)
                if compilation_info.compiler_flags_:
                    return compilation_info
            return None
    else:
        return FindDatabseAndCompilationInfo(filename)


def FlagsForFile(filename, **kwargs):
    try:
        # Bear in mind that compilation_info.compiler_flags_ does NOT return a
        # python list, but a "list-like" StringVec object
        compilation_info = GetCompilationInfoForFile(filename)
        if not compilation_info:
            raise MissingDatabase

        final_flags = MakeRelativePathsInFlagsAbsolute(compilation_info.compiler_flags_,
                                                       compilation_info.compiler_working_dir_)

        # NOTE: This is just for YouCompleteMe; it's highly likely that your project
        # does NOT need to remove the stdlib flag. DO NOT USE THIS IN YOUR
        # ycm_extra_conf IF YOU'RE NOT 100% SURE YOU NEED IT.
        try:
            final_flags.remove('-stdlib=libc++')
        except ValueError:
            pass
    except MissingDatabase:
        return {'flags': BASE_FLAGS,
                'do_cache': False
                }

    return {'flags': final_flags,
            'do_cache': True
            }


def IsRiker(filename):
    cwd = os.getcwd()
    dir = DirectoryOfThisFile(filename)
    os.chdir(dir)
    try:
        out = subprocess.check_output(["git", "remote", "-v"])
    except subprocess.CalledProcessError:
        out = ""
    os.chdir(cwd)

    return "git.corp.squareup.com/hw/riker.git" in out
